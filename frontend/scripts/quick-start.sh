#!/bin/bash

echo "üöÄ BANTUDELICE - D√âMARRAGE RAPIDE"
echo "=================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire frontend/"
    exit 1
fi

print_status "V√©rification de l'environnement..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

NODE_VERSION=$(node --version)
print_success "Node.js $NODE_VERSION d√©tect√©"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

print_success "npm d√©tect√©"

# Installer les d√©pendances si n√©cessaire
if [ ! -d "node_modules" ]; then
    print_status "Installation des d√©pendances..."
    npm install
    if [ $? -eq 0 ]; then
        print_success "D√©pendances install√©es"
    else
        print_error "Erreur lors de l'installation des d√©pendances"
        exit 1
    fi
else
    print_success "D√©pendances d√©j√† install√©es"
fi

# V√©rifier la qualit√© du code
print_status "V√©rification de la qualit√© du code..."

LINT_OUTPUT=$(npm run lint 2>&1)
LINT_EXIT_CODE=$?

if [ $LINT_EXIT_CODE -eq 0 ]; then
    print_success "Code qualit√© OK"
else
    ERROR_COUNT=$(echo "$LINT_OUTPUT" | grep -c "error" || echo "0")
    WARNING_COUNT=$(echo "$LINT_OUTPUT" | grep -c "warning" || echo "0")
    
    print_warning "Probl√®mes d√©tect√©s: $ERROR_COUNT erreurs, $WARNING_COUNT warnings"
    
    if [ $ERROR_COUNT -gt 150 ]; then
        print_error "Trop d'erreurs d√©tect√©es. Lancement de la correction automatique..."
        node scripts/fix-types.js
    fi
fi

# V√©rifier la compilation
print_status "V√©rification de la compilation..."

BUILD_OUTPUT=$(npm run build 2>&1)
BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    print_success "Compilation r√©ussie"
else
    print_error "Erreur de compilation"
    echo "$BUILD_OUTPUT"
    exit 1
fi

# Lancer les tests
print_status "Lancement des tests..."

if npm test &> /dev/null; then
    print_success "Tests pass√©s"
else
    print_warning "Tests non configur√©s ou √©chou√©s"
fi

# Afficher les m√©triques finales
print_status "M√©triques finales:"

if [ $LINT_EXIT_CODE -eq 0 ]; then
    print_success "‚úÖ Qualit√© du code: EXCELLENTE"
else
    print_warning "‚ö†Ô∏è  Qualit√© du code: √Ä AM√âLIORER ($ERROR_COUNT erreurs, $WARNING_COUNT warnings)"
fi

print_success "‚úÖ Compilation: R√âUSSIE"
print_success "‚úÖ Environnement: PR√äT"

echo ""
echo "üéØ PROCHAINES √âTAPES:"
echo "===================="
echo "1. D√©marrer le serveur de d√©veloppement: npm run dev"
echo "2. Ouvrir http://localhost:5173 dans votre navigateur"
echo "3. Consulter le guide de maintenance: scripts/maintenance-guide.md"
echo "4. Utiliser les scripts d'optimisation si n√©cessaire:"
echo "   - node scripts/fix-types.js (correction automatique)"
echo "   - node scripts/optimize-hooks.js (optimisation des hooks)"
echo "   - node scripts/finalize-optimization.js (validation compl√®te)"

echo ""
print_success "üöÄ BantuDelice est pr√™t pour le d√©veloppement !"

# Option pour d√©marrer automatiquement le serveur
read -p "Voulez-vous d√©marrer le serveur de d√©veloppement maintenant ? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "D√©marrage du serveur de d√©veloppement..."
    npm run dev
fi 