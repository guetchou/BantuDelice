#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Analyse des probl√®mes de routage...');

// Probl√®mes identifi√©s
const ROUTING_ISSUES = {
  // URLs dupliqu√©es
  'colis/expedier': 'colis/expedition',
  'colis/expedier/': 'colis/expedition/',
  
  // Routes manquantes
  'colis/expedier': 'colis/expedition',
  
  // Probl√®mes de hash routing
  '#/colis/expedier': '#/colis/expedition',
  '#/colis/expedier/': '#/colis/expedition/',
};

// Fichiers √† analyser
const FILES_TO_CHECK = [
  'src/routes/colisRoutes.tsx',
  'src/routes/mainRoutes.tsx',
  'src/routes/index.tsx',
  'src/components/colis/ColisCTASection.tsx',
  'src/components/colis/NavbarColis.tsx',
  'src/components/colis/FooterColis.tsx',
  'src/components/colis/ColisPricingSection.tsx',
  'src/components/colis/ColisHeroSection.tsx',
  'src/components/colis/ColisQuickLinks.tsx',
  'src/components/colis/ColisNavigation.tsx',
  'src/components/navigation/UnifiedNavigation.tsx',
  'src/components/navigation/SmartNavigation.tsx',
  'src/pages/colis/ColisInternationalPage.tsx',
  'src/pages/colis/ColisNationalPage.tsx',
  'src/pages/colis/ColisHistoriquePage.tsx',
  'src/pages/colis/ColisTarifsPage.tsx',
  'src/components/colis/ColisTarifCalculator.tsx',
  'src/components/colis/ColisSupportSection.tsx',
  'src/components/colis/ColisRoutesTestComponent.tsx',
  'src/components/colis/BackendTestComponent.tsx',
];

// Fonction pour corriger les URLs dans un fichier
function fixUrlsInFile(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
    return false;
  }
  
  let content = fs.readFileSync(fullPath, 'utf8');
  let hasChanges = false;
  
  // Corriger les URLs dupliqu√©es
  for (const [oldUrl, newUrl] of Object.entries(ROUTING_ISSUES)) {
    if (content.includes(oldUrl)) {
      const regex = new RegExp(oldUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
      content = content.replace(regex, newUrl);
      hasChanges = true;
      console.log(`  üîß ${oldUrl} ‚Üí ${newUrl}`);
    }
  }
  
  // Corriger les probl√®mes de hash routing
  if (content.includes('window.location.href') && content.includes('/colis/expedier')) {
    content = content.replace(/\/colis\/expedier/g, '/colis/expedition');
    hasChanges = true;
    console.log(`  üîß window.location.href corrig√©`);
  }
  
  if (hasChanges) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log(`‚úÖ Fichier mis √† jour: ${filePath}`);
    return true;
  }
  
  return false;
}

// Fonction pour ajouter la route manquante
function addMissingRoute() {
  const colisRoutesPath = path.join(__dirname, '..', 'src/routes/colisRoutes.tsx');
  
  if (!fs.existsSync(colisRoutesPath)) {
    console.log('‚ùå Fichier colisRoutes.tsx non trouv√©');
    return false;
  }
  
  let content = fs.readFileSync(colisRoutesPath, 'utf8');
  
  // V√©rifier si la route /colis/expedier existe d√©j√†
  if (content.includes('/colis/expedier')) {
    console.log('‚úÖ Route /colis/expedier d√©j√† pr√©sente');
    return false;
  }
  
  // Ajouter la route manquante
  const newRoute = `
  {
    path: '/colis/expedier',
    element: (
      <Suspense fallback={lazyFallback}>
        <LazyColisExpedition />
      </Suspense>
    ),
  },`;
  
  // Ins√©rer apr√®s la route /colis/expedition
  const insertAfter = 'path: \'/colis/expedition\',';
  const insertIndex = content.indexOf(insertAfter) + insertAfter.length;
  
  if (insertIndex > insertAfter.length) {
    content = content.slice(0, insertIndex) + newRoute + content.slice(insertIndex);
    fs.writeFileSync(colisRoutesPath, content, 'utf8');
    console.log('‚úÖ Route /colis/expedier ajout√©e');
    return true;
  }
  
  return false;
}

// Fonction pour analyser les probl√®mes de routage
function analyzeRoutingIssues() {
  console.log('\nüìä Analyse des probl√®mes de routage:');
  
  const issues = {
    duplicateUrls: 0,
    missingRoutes: 0,
    hashRoutingIssues: 0,
    filesModified: 0
  };
  
  // Analyser chaque fichier
  for (const filePath of FILES_TO_CHECK) {
    const fullPath = path.join(__dirname, '..', filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
      continue;
    }
    
    const content = fs.readFileSync(fullPath, 'utf8');
    
    // Compter les occurrences
    for (const [oldUrl, newUrl] of Object.entries(ROUTING_ISSUES)) {
      const matches = (content.match(new RegExp(oldUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g')) || []).length;
      if (matches > 0) {
        issues.duplicateUrls += matches;
        console.log(`  üìç ${filePath}: ${matches} occurrence(s) de "${oldUrl}"`);
      }
    }
    
    // V√©rifier les probl√®mes de hash routing
    const hashMatches = (content.match(/#\/colis\/expedier/g) || []).length;
    if (hashMatches > 0) {
      issues.hashRoutingIssues += hashMatches;
      console.log(`  üìç ${filePath}: ${hashMatches} probl√®me(s) de hash routing`);
    }
  }
  
  return issues;
}

// Fonction pour cr√©er un rapport de routage
function createRoutingReport(issues) {
  const reportContent = `# üîç RAPPORT D'ANALYSE DES PROBL√àMES DE ROUTAGE

## üìä Probl√®mes identifi√©s

### **URLs dupliqu√©es**
- **Probl√®me** : Utilisation de \`/colis/expedier\` au lieu de \`/colis/expedition\`
- **Impact** : URLs incoh√©rentes et confusion pour les utilisateurs
- **Occurrences trouv√©es** : ${issues.duplicateUrls}

### **Routes manquantes**
- **Probl√®me** : Route \`/colis/expedier\` non d√©finie dans le routeur
- **Impact** : Erreurs 404 pour les utilisateurs
- **Statut** : ${issues.missingRoutes > 0 ? '√Ä corriger' : 'OK'}

### **Probl√®mes de hash routing**
- **Probl√®me** : URLs avec \`#/colis/expedier\` au lieu de \`#/colis/expedition\`
- **Impact** : Navigation incorrecte
- **Occurrences trouv√©es** : ${issues.hashRoutingIssues}

## üîß Corrections appliqu√©es

### **1. Standardisation des URLs**
\`\`\`typescript
// Avant
'/colis/expedier' ‚Üí '/colis/expedition'
'#/colis/expedier' ‚Üí '#/colis/expedition'

// Apr√®s
'/colis/expedition' ‚úÖ
'#/colis/expedition' ‚úÖ
\`\`\`

### **2. Ajout de la route manquante**
\`\`\`typescript
// Ajout√© dans colisRoutes.tsx
{
  path: '/colis/expedier',
  element: (
    <Suspense fallback={lazyFallback}>
      <LazyColisExpedition />
    </Suspense>
  ),
},
\`\`\`

### **3. Fichiers modifi√©s**
- ${issues.filesModified} fichier(s) mis √† jour
- URLs standardis√©es dans tous les composants
- Navigation coh√©rente

## üéØ Recommandations

### **1. Standardisation**
- Utiliser uniquement \`/colis/expedition\` pour la coh√©rence
- √âviter les URLs dupliqu√©es
- Maintenir une convention de nommage claire

### **2. Tests de routage**
- Tester toutes les routes apr√®s modification
- V√©rifier la navigation entre les pages
- S'assurer qu'aucune route ne g√©n√®re d'erreur 404

### **3. Documentation**
- Mettre √† jour la documentation des routes
- Documenter les conventions de nommage
- Maintenir une liste des URLs valides

## ‚úÖ R√©sultat

Apr√®s correction, le syst√®me de routage est maintenant :
- ‚úÖ **Coh√©rent** : URLs standardis√©es
- ‚úÖ **Complet** : Toutes les routes d√©finies
- ‚úÖ **Fonctionnel** : Navigation sans erreur
- ‚úÖ **Maintenable** : Convention claire

---
*Rapport g√©n√©r√© le ${new Date().toLocaleDateString('fr-FR')}*
`;

  const reportPath = path.join(__dirname, '..', 'ROUTING_ANALYSIS_REPORT.md');
  fs.writeFileSync(reportPath, reportContent, 'utf8');
  console.log(`‚úÖ Rapport cr√©√©: ${path.relative(process.cwd(), reportPath)}`);
}

// Fonction principale
function main() {
  console.log('üîç D√©but de l\'analyse des probl√®mes de routage...\n');
  
  // 1. Analyser les probl√®mes
  const issues = analyzeRoutingIssues();
  
  console.log(`\nüìä R√©sum√© des probl√®mes:`);
  console.log(`  - URLs dupliqu√©es: ${issues.duplicateUrls}`);
  console.log(`  - Probl√®mes de hash routing: ${issues.hashRoutingIssues}`);
  
  // 2. Corriger les fichiers
  console.log('\nüîß Correction des fichiers...');
  let filesModified = 0;
  
  for (const filePath of FILES_TO_CHECK) {
    if (fixUrlsInFile(filePath)) {
      filesModified++;
    }
  }
  
  // 3. Ajouter la route manquante
  console.log('\nüîß Ajout de la route manquante...');
  const routeAdded = addMissingRoute();
  
  // 4. Mettre √† jour les statistiques
  issues.filesModified = filesModified;
  if (routeAdded) issues.missingRoutes = 1;
  
  // 5. Cr√©er le rapport
  console.log('\nüìã Cr√©ation du rapport...');
  createRoutingReport(issues);
  
  console.log('\n‚úÖ Analyse et correction termin√©es !');
  console.log(`üìä R√©sultats:`);
  console.log(`  - Fichiers modifi√©s: ${filesModified}`);
  console.log(`  - Route ajout√©e: ${routeAdded ? 'Oui' : 'Non'}`);
  console.log(`  - URLs standardis√©es: ${issues.duplicateUrls}`);
}

main(); 