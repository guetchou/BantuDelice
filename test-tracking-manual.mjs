#!/usr/bin/env node

/**
 * TEST MANUEL - SYST√àME DE TRACKING GPS TEMPS R√âEL
 * 
 * Ce script teste le syst√®me de tracking GPS en utilisant les endpoints existants
 * et simule le comportement d'une application livreur.
 */

import http from 'http';
import https from 'https';

// Configuration
const API_BASE_URL = 'http://localhost:3001';
const FRONTEND_URL = 'http://localhost:9595';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${colors.bright}${colors.blue}=== √âTAPE ${step}: ${message} ===${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'cyan');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

// Coordonn√©es GPS simul√©es (trajet Brazzaville)
const gpsCoordinates = [
  { lat: -4.2634, lng: 15.2429, description: "Centre-ville Brazzaville" },
  { lat: -4.2650, lng: 15.2440, description: "Quartier Bacongo" },
  { lat: -4.2670, lng: 15.2460, description: "Avenue de la Paix" },
  { lat: -4.2690, lng: 15.2480, description: "Zone industrielle" },
  { lat: -4.2710, lng: 15.2500, description: "P√©riph√©rie nord" },
  { lat: -4.2730, lng: 15.2520, description: "Destination finale" }
];

// Fonction utilitaire pour faire des requ√™tes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            status: res.statusCode,
            data: jsonData,
            headers: res.headers
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            data: data,
            headers: res.headers
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

class ManualTrackingTester {
  constructor() {
    this.trackingNumber = 'BD123456'; // Utiliser un num√©ro de test existant
    this.startTime = Date.now();
  }

  async runManualTest() {
    log(`${colors.bright}${colors.magenta}üöÄ TEST MANUEL - SYST√àME DE TRACKING GPS TEMPS R√âEL${colors.reset}`);
    log(`${colors.cyan}Num√©ro de tracking de test: ${this.trackingNumber}${colors.reset}\n`);

    try {
      // √âTAPE 1: V√©rifier que le colis existe
      await this.verifyColisExists();

      // √âTAPE 2: Simuler l'√©mission de coordonn√©es GPS
      await this.simulateGPSEmission();

      // √âTAPE 3: Afficher les instructions pour le test manuel
      this.displayManualTestInstructions();

    } catch (error) {
      logError(`Erreur lors du test: ${error.message}`);
    }
  }

  async verifyColisExists() {
    logStep(1, "V√©rification de l'existence du colis");

    try {
      const response = await makeRequest(`${API_BASE_URL}/colis/${this.trackingNumber}`);
      
      if (response.status === 200) {
        logSuccess(`Colis trouv√©: ${this.trackingNumber}`);
        logInfo(`Statut: ${response.data.status || 'Inconnu'}`);
        logInfo(`API Backend: ‚úÖ Op√©rationnel`);
      } else if (response.status === 404) {
        logWarning(`Colis ${this.trackingNumber} non trouv√©`);
        logInfo(`Cr√©ation d'un colis de test n√©cessaire`);
        logInfo(`API Backend: ‚úÖ Op√©rationnel`);
      } else {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
    } catch (error) {
      logError(`√âchec de la v√©rification: ${error.message}`);
      throw error;
    }
  }

  async simulateGPSEmission() {
    logStep(2, "Simulation de l'√©mission de coordonn√©es GPS");

    logInfo('Simulation d\'une application livreur qui √©met des coordonn√©es GPS...');
    
    for (let i = 0; i < gpsCoordinates.length; i++) {
      const coord = gpsCoordinates[i];
      
      // Simuler une mise √† jour de position
      const locationUpdate = {
        trackingNumber: this.trackingNumber,
        latitude: coord.lat,
        longitude: coord.lng,
        accuracy: 5 + Math.random() * 10, // Pr√©cision 5-15m
        speed: 20 + Math.random() * 30, // Vitesse 20-50 km/h
        heading: Math.random() * 360, // Direction 0-360¬∞
        timestamp: new Date().toISOString()
      };

      logInfo(`üìç Position ${i + 1}: ${coord.description}`);
      logInfo(`   Lat: ${coord.lat}, Lng: ${coord.lng}`);
      logInfo(`   Pr√©cision: ¬±${locationUpdate.accuracy.toFixed(1)}m`);
      logInfo(`   Vitesse: ${locationUpdate.speed.toFixed(1)} km/h`);
      logInfo(`   Timestamp: ${new Date(locationUpdate.timestamp).toLocaleTimeString()}`);

      // Simuler l'envoi via WebSocket (en r√©alit√©, ce serait fait par l'app livreur)
      logInfo(`   üì° Envoi via WebSocket au serveur...`);
      
      // Attendre 2 secondes entre chaque mise √† jour
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    logSuccess(`${gpsCoordinates.length} positions GPS simul√©es`);
  }

  displayManualTestInstructions() {
    logStep(3, "Instructions pour le test manuel");

    log(`${colors.bright}${colors.magenta}üìã INSTRUCTIONS POUR TESTER MANUELLEMENT:${colors.reset}\n`);

    log(`${colors.cyan}1. üñ•Ô∏è  OUVREZ L'INTERFACE CLIENT:${colors.reset}`);
    log(`   Naviguez vers: ${colors.bright}${FRONTEND_URL}/colis/tracking/${this.trackingNumber}${colors.reset}`);
    log(`   Ou utilisez le num√©ro de tracking: ${colors.bright}${this.trackingNumber}${colors.reset}`);

    log(`\n${colors.cyan}2. üîê CONNECTEZ-VOUS (si n√©cessaire):${colors.reset}`);
    log(`   Utilisez les identifiants de test ou cr√©ez un compte`);
    log(`   L'authentification est requise pour le tracking GPS temps r√©el`);

    log(`\n${colors.cyan}3. üó∫Ô∏è  ACTIVEZ LE TRACKING GPS:${colors.reset}`);
    log(`   Cliquez sur le bouton "Activer GPS"`);
    log(`   Autorisez l'acc√®s √† la g√©olocalisation dans votre navigateur`);
    log(`   V√©rifiez que la carte s'affiche avec votre position actuelle`);

    log(`\n${colors.cyan}4. üì± SIMULEZ L'APPLICATION LIVREUR:${colors.reset}`);
    log(`   Ouvrez une autre fen√™tre/onglet`);
    log(`   Naviguez vers: ${colors.bright}${FRONTEND_URL}/driver/tracking${colors.reset}`);
    log(`   Connectez-vous en tant que livreur`);
    log(`   Entrez le num√©ro de tracking: ${colors.bright}${this.trackingNumber}${colors.reset}`);

    log(`\n${colors.cyan}5. üöö √âMETTEZ DES COORDONN√âES GPS:${colors.reset}`);
    log(`   L'application livreur devrait automatiquement:`);
    log(`   ‚Ä¢ D√©marrer le tracking GPS`);
    log(`   ‚Ä¢ Envoyer les coordonn√©es en temps r√©el`);
    log(`   ‚Ä¢ Afficher l'itin√©raire optimis√©`);

    log(`\n${colors.cyan}6. üëÄ V√âRIFIEZ L'AFFICHAGE TEMPS R√âEL:${colors.reset}`);
    log(`   Retournez √† l'interface client`);
    log(`   V√©rifiez que la position du livreur s'affiche en temps r√©el`);
    log(`   V√©rifiez que l'itin√©raire se met √† jour`);
    log(`   V√©rifiez que l'arriv√©e estim√©e se calcule automatiquement`);

    log(`\n${colors.cyan}7. üíæ V√âRIFIEZ LA BASE DE DONN√âES:${colors.reset}`);
    log(`   Connectez-vous √† la base de donn√©es PostgreSQL`);
    log(`   V√©rifiez la table 'tracking_updates'`);
    log(`   V√©rifiez que les coordonn√©es sont bien enregistr√©es`);

    log(`\n${colors.bright}${colors.green}üéØ POINTS √Ä V√âRIFIER:${colors.reset}`);
    log(`   ‚úÖ La carte affiche la position en temps r√©el`);
    log(`   ‚úÖ Les coordonn√©es GPS sont pr√©cises (¬±5-15m)`);
    log(`   ‚úÖ L'itin√©raire se met √† jour automatiquement`);
    log(`   ‚úÖ L'arriv√©e estim√©e se calcule correctement`);
    log(`   ‚úÖ Les notifications s'affichent en temps r√©el`);
    log(`   ‚úÖ La base de donn√©es enregistre les positions`);
    log(`   ‚úÖ L'interface est responsive et moderne`);

    log(`\n${colors.bright}${colors.yellow}‚ö†Ô∏è  EN CAS DE PROBL√àME:${colors.reset}`);
    log(`   ‚Ä¢ V√©rifiez que le backend est d√©marr√© sur le port 3001`);
    log(`   ‚Ä¢ V√©rifiez que le frontend est d√©marr√© sur le port 9595`);
    log(`   ‚Ä¢ V√©rifiez les permissions de g√©olocalisation`);
    log(`   ‚Ä¢ V√©rifiez la connexion WebSocket dans les outils de d√©veloppement`);
    log(`   ‚Ä¢ Consultez les logs du serveur pour les erreurs`);

    // Statistiques
    log(`\n${colors.cyan}üìà STATISTIQUES DU TEST:${colors.reset}`);
    log(`  ‚Ä¢ Positions simul√©es: ${gpsCoordinates.length}`);
    log(`  ‚Ä¢ Temps de simulation: ~${Math.round((Date.now() - this.startTime) / 1000)}s`);
    log(`  ‚Ä¢ Num√©ro de tracking: ${this.trackingNumber}`);
    log(`  ‚Ä¢ API Backend: http://localhost:3001`);
    log(`  ‚Ä¢ Frontend: http://localhost:9595`);

    log(`\n${colors.bright}${colors.green}üéâ LE SYST√àME DE TRACKING GPS EST PR√äT POUR LES TESTS !${colors.reset}`);
  }
}

// Fonction principale
async function main() {
  const tester = new ManualTrackingTester();
  
  try {
    await tester.runManualTest();
  } catch (error) {
    logError(`Test √©chou√©: ${error.message}`);
    process.exit(1);
  }
}

// D√©marrer le test
main(); 