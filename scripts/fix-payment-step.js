#!/usr/bin/env node

import fs from 'fs';

const filePath = 'frontend/src/pages/colis/ColisExpeditionModernFixed.tsx';

try {
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Remplacer la fonction handleSubmit pour int√©grer les vraies APIs
  const newHandleSubmit = `
  const handleSubmit = async () => {
    setIsSubmitting(true);
    
    try {
      // Validation finale avant soumission
      const finalValidation = validateStepWithErrors(5);
      if (!finalValidation.isValid) {
        setStepErrors(prev => ({ ...prev, 5: finalValidation.errors }));
        setIsSubmitting(false);
        return;
      }

      // Pr√©parer les donn√©es de paiement
      const paymentData = {
        amount: priceCalculation?.total || 0,
        method: formData.paymentMethod.toUpperCase(),
        phoneNumber: formData.phoneNumber,
        orderId: \`COLIS_\${Date.now()}\`,
        description: \`Exp√©dition colis de \${formData.sender.city} vers \${formData.recipient.city}\`
      };

      console.log('üí≥ Donn√©es de paiement:', paymentData);

      // Appel API de paiement
      const paymentResponse = await fetch('/api/payments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(paymentData)
      });

      if (!paymentResponse.ok) {
        throw new Error('Erreur lors du traitement du paiement');
      }

      const paymentResult = await paymentResponse.json();
      console.log('‚úÖ Paiement trait√©:', paymentResult);

      // Pr√©parer les donn√©es d'exp√©dition
      const expeditionData = {
        ...formData,
        paymentTransactionId: paymentResult.transactionId,
        totalAmount: priceCalculation?.total || 0
      };

      // Appel API de cr√©ation d'exp√©dition
      const expeditionResponse = await fetch('/api/colis/expedition', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(expeditionData)
      });

      if (!expeditionResponse.ok) {
        throw new Error('Erreur lors de la cr√©ation de l\'exp√©dition');
      }

      const expeditionResult = await expeditionResponse.json();
      console.log('üì¶ Exp√©dition cr√©√©e:', expeditionResult);

      // Sauvegarder les donn√©es pour la page de confirmation
      localStorage.setItem('expeditionData', JSON.stringify({
        ...expeditionData,
        trackingNumber: expeditionResult.data.trackingNumber,
        paymentResult: paymentResult
      }));

      // Envoyer les notifications
      await sendNotifications(expeditionData, expeditionResult.data.trackingNumber);

      setIsSubmitting(false);
      
      // Redirection vers la page de confirmation
      navigate('/colis/expedition-complete');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la soumission:', error);
      setStepErrors(prev => ({ 
        ...prev, 
        5: [error.message || 'Erreur lors de la soumission de l\'exp√©dition'] 
      }));
      setIsSubmitting(false);
    }
  };

  // Fonction pour envoyer les notifications
  const sendNotifications = async (expeditionData, trackingNumber) => {
    try {
      const notificationData = {
        trackingNumber,
        senderPhone: expeditionData.sender.phone,
        senderEmail: expeditionData.sender.email,
        recipientPhone: expeditionData.recipient.phone,
        recipientEmail: expeditionData.recipient.email,
        fromCity: expeditionData.sender.city,
        toCity: expeditionData.recipient.city,
        amount: expeditionData.totalAmount
      };

      // Appel API de notifications
      const notificationResponse = await fetch('/api/colis/notifications/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notificationData)
      });

      if (notificationResponse.ok) {
        console.log('üì± Notifications envoy√©es avec succ√®s');
      } else {
        console.warn('‚ö†Ô∏è Erreur lors de l\'envoi des notifications');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur notifications:', error);
    }
  };`;

  // Remplacer l'ancienne fonction handleSubmit
  const handleSubmitRegex = /const handleSubmit = async \(\) => \{[\s\S]*?\};/;
  content = content.replace(handleSubmitRegex, newHandleSubmit);

  // Ajouter la validation de l'√©tape 5 dans validateStepWithErrors
  const validateStep5Regex = /case 5:\s*\/\/ Validation de l'√©tape 5[\s\S]*?break;/;
  const newValidateStep5 = `case 5:
        // Validation de l'√©tape 5 - Paiement
        if (!formData.paymentMethod) {
          errors.push("Veuillez s√©lectionner une m√©thode de paiement");
        }
        
        if (formData.paymentMethod !== 'cash') {
          if (!formData.phoneNumber) {
            errors.push("Le num√©ro de t√©l√©phone est obligatoire pour le paiement mobile");
          } else if (!validatePhoneNumber(formData.phoneNumber)) {
            errors.push("Le num√©ro de t√©l√©phone n'est pas valide");
          }
        }
        
        if (formData.paymentMethod === 'cash') {
          if (!formData.cashAmount || parseFloat(formData.cashAmount) <= 0) {
            errors.push("Le montant en esp√®ces doit √™tre sup√©rieur √† 0");
          }
        }
        
        if (!priceCalculation) {
          errors.push("Le calcul de prix est obligatoire avant de continuer");
        }
        break;`;

  content = content.replace(validateStep5Regex, newValidateStep5);

  // √âcrire le fichier modifi√©
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('‚úÖ √âtape 5 corrig√©e avec int√©gration des APIs de paiement et notifications !');
  console.log('üîß Modifications apport√©es:');
  console.log('   - Int√©gration API de paiement (/api/payments)');
  console.log('   - Int√©gration API d\'exp√©dition (/api/colis/expedition)');
  console.log('   - Int√©gration API de notifications (/api/colis/notifications/send)');
  console.log('   - Validation compl√®te de l\'√©tape 5');
  console.log('   - Gestion d\'erreurs robuste');
  console.log('   - Logs d√©taill√©s pour debugging');
  
} catch (error) {
  console.error('‚ùå Erreur lors de la correction de l\'√©tape 5:', error.message);
  process.exit(1);
} 